using Strategy.Models.Ducks;

// Нужно заставить разных утов использовать разное поведение
// Петтерн говорит нам о том, чтобы мы мы вычленяли общий функционал и частный. 
// при помощи интерфейсов мы меняем дефолтный функционал. Через интерфейс пробрасываем любое поведение
// отделения поведения на основен интерфейса в отдельный модуль и компоновка в зависимости от необходимости

//________________________________________________________________________________________________________
/*
 * - Паттерн стратегия определяет семесвто алгоритмов, инкапсулирует каждый из них и обеспечивает взаимозаменяемость
 * - Принцип проектирования: определить постоянные части программы от изменяемых
 * - Принцип проектирования: отдавать предпочтение композиции, а не наследованию(работа с интерфейсами в классе DuckBase)
 * - Принцип прграммирования: программируйте на уровне интерфейса а не реализации
 */
var ducks = new List<DuckBase>
{
    new ExoticDuck(),
    new SimpleDuck(),
    new WoodenDuck(),
    new RubberDuck()
};

foreach (var duck in ducks)
{
    duck.Display();
    duck.Swim();
    duck.Fly();
    duck.Quack();
    duck.Song();

    Console.WriteLine();
}


Console.ReadKey();